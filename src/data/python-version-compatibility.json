{
  "python_versions": {
    "3.7": {
      "introduced": ["@dataclass decorator"],
      "typing_requirements": {
        "List": "from typing import List",
        "Dict": "from typing import Dict", 
        "Set": "from typing import Set",
        "Tuple": "from typing import Tuple"
      },
      "notes": ["First version with dataclasses", "All generic types require typing import"]
    },
    "3.8": {
      "introduced": ["TypedDict", "Literal types", "Final"],
      "typing_requirements": {
        "List": "from typing import List",
        "Dict": "from typing import Dict",
        "Set": "from typing import Set", 
        "Tuple": "from typing import Tuple",
        "TypedDict": "from typing_extensions import TypedDict"
      },
      "notes": ["TypedDict available but experimental", "Still requires typing imports for generics"]
    },
    "3.9": {
      "introduced": ["Built-in generic types", "dict and list as generic types"],
      "typing_requirements": {
        "List": "list[T] # built-in generic OR from typing import List",
        "Dict": "dict[K, V] # built-in generic OR from typing import Dict",
        "Set": "set[T] # built-in generic OR from typing import Set",
        "Tuple": "tuple[T, ...] # built-in generic OR from typing import Tuple"
      },
      "notes": ["Major milestone: built-in generic types", "Can use dict/list directly without imports"],
      "migration_impact": "High - enables cleaner type syntax"
    },
    "3.10": {
      "introduced": ["Union operator |", "Pattern matching"],
      "typing_requirements": {
        "Union": "str | int # union operator OR from typing import Union"
      },
      "notes": ["Union syntax simplification", "Pattern matching for complex type checking"],
      "migration_impact": "Medium - cleaner union syntax"
    },
    "3.11": {
      "introduced": ["Self type", "Enhanced error messages"],
      "notes": ["Better self-referential types", "Improved typing error messages"],
      "migration_impact": "Low - mainly quality of life improvements"
    }
  },
  "typescript_compatibility": {
    "mapping_recommendations": {
      "python_3.7_3.8": {
        "approach": "Traditional typing imports",
        "example": "from typing import List, Dict, Optional",
        "typescript_equivalent": "Array<T>, Record<K, V>, T | undefined"
      },
      "python_3.9_plus": {
        "approach": "Built-in generics preferred",
        "example": "list[str], dict[str, int]",
        "typescript_equivalent": "string[], Record<string, number>",
        "notes": ["More readable", "Closer to TypeScript syntax"]
      },
      "python_3.10_plus": {
        "approach": "Union operator syntax",
        "example": "str | int | None",
        "typescript_equivalent": "string | number | null",
        "notes": ["Direct syntax mapping", "Easier to convert"]
      }
    }
  },
  "migration_strategies": {
    "by_python_version": {
      "legacy_python": {
        "versions": ["3.7", "3.8"],
        "strategy": "Comprehensive typing import mapping",
        "challenges": ["More verbose type imports", "TypedDict compatibility"],
        "recommendations": ["Map all typing imports systematically", "Consider modernizing Python first"]
      },
      "modern_python": {
        "versions": ["3.9", "3.10", "3.11"],
        "strategy": "Direct syntax mapping where possible",
        "advantages": ["Cleaner syntax", "Better TypeScript alignment"],
        "recommendations": ["Leverage built-in generics", "Use union operator for 3.10+"]
      }
    }
  },
  "real_world_usage": {
    "py_ts_interfaces_project": {
      "focus": "Python 3.7+ dataclass to TypeScript interface",
      "type_mappings": {
        "None": "null",
        "str": "string",
        "int": "number", 
        "float": "number",
        "bool": "boolean",
        "List[T]": "Array<T>",
        "Dict[K, V]": "Record<K, V>",
        "Optional[T]": "T | null"
      },
      "limitations": ["Archived project", "Focused on dataclasses only"],
      "value": "Proven type mapping patterns"
    },
    "typed_python_article": {
      "python_version": "3.9",
      "key_insights": [
        "Environment setup crucial for typed Python",
        "Python versions matter more than TypeScript versions",
        "Optional properties differ between languages",
        "Development tooling recommendations"
      ]
    }
  },
  "tooling_recommendations": {
    "development_environment": {
      "python_setup": [
        "Use virtual environments (venv/docker)",
        "Install black formatter",
        "Install pylint linter", 
        "Use Pylance language server"
      ],
      "vscode_settings": {
        "python.analysis.typeCheckingMode": "basic or strict",
        "python.analysis.extraPaths": ["src"],
        "python.formatting.provider": "black"
      }
    },
    "migration_tools": {
      "static_analysis": ["mypy for Python type checking", "tsc for TypeScript validation"],
      "conversion_helpers": ["py-ts-interfaces (archived but reference)", "Custom AST parsers"],
      "testing": ["Parallel test suites", "Type compatibility validation"]
    }
  }
} 