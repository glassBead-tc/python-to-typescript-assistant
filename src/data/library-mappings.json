{
  "web_frameworks": {
    "flask": {
      "pythonLibrary": "flask",
      "category": "web_framework",
      "typeScriptEquivalents": [
        {
          "name": "Express.js",
          "package": "express",
          "confidence": "high",
          "notes": ["Most popular Node.js web framework", "Similar routing concepts"],
          "installCommand": "npm install express @types/express",
          "apiDifferences": ["Different decorator syntax", "Manual route definition"],
          "migrationGuide": "Convert Flask routes to Express.js routes, replace decorators with route handlers"
        },
        {
          "name": "Fastify",
          "package": "fastify",
          "confidence": "medium",
          "notes": ["High performance", "TypeScript-first"],
          "installCommand": "npm install fastify",
          "apiDifferences": ["Schema-based validation", "Plugin architecture"],
          "migrationGuide": "Leverage Fastify's TypeScript support and schema validation"
        }
      ],
      "migrationComplexity": "moderate",
      "recommendations": ["Consider Express.js for familiarity", "Fastify for performance and TypeScript"],
      "architecturalConsiderations": ["Middleware patterns differ", "Error handling approaches vary"]
    },
    "django": {
      "pythonLibrary": "django",
      "category": "web_framework",
      "typeScriptEquivalents": [
        {
          "name": "Nest.js",
          "package": "@nestjs/core",
          "confidence": "high",
          "notes": ["Enterprise-grade", "Decorator-based like Django", "Built-in TypeScript"],
          "installCommand": "npm install @nestjs/core @nestjs/common",
          "apiDifferences": ["Different ORM integration", "Module-based architecture"],
          "migrationGuide": "Map Django apps to NestJS modules, convert models to TypeORM entities"
        },
        {
          "name": "Next.js + tRPC",
          "package": "next trpc",
          "confidence": "medium", 
          "notes": ["Full-stack framework", "Type-safe API layer"],
          "installCommand": "npx create-next-app@latest --typescript",
          "apiDifferences": ["File-based routing", "Different templating"],
          "migrationGuide": "Convert Django views to Next.js API routes, use tRPC for type safety"
        }
      ],
      "migrationComplexity": "complex",
      "recommendations": ["Consider Nest.js for enterprise applications", "Next.js for full-stack with frontend"],
      "architecturalConsiderations": ["ORM migration required", "Authentication system redesign needed"]
    },
    "fastapi": {
      "pythonLibrary": "fastapi",
      "category": "web_framework",
      "typeScriptEquivalents": [
        {
          "name": "Fastify + TypeBox",
          "package": "fastify @sinclair/typebox",
          "confidence": "high",
          "notes": ["Similar performance focus", "Schema validation", "TypeScript native"],
          "installCommand": "npm install fastify @sinclair/typebox",
          "apiDifferences": ["Different schema syntax", "Plugin-based architecture"],
          "migrationGuide": "Convert Pydantic models to TypeBox schemas, map FastAPI routes to Fastify routes"
        },
        {
          "name": "tRPC + Express",
          "package": "trpc express",
          "confidence": "high",
          "notes": ["End-to-end type safety", "Similar API design philosophy"],
          "installCommand": "npm install @trpc/server express",
          "apiDifferences": ["Procedure-based instead of route-based", "Different middleware approach"],
          "migrationGuide": "Convert FastAPI endpoints to tRPC procedures, maintain type safety throughout"
        }
      ],
      "migrationComplexity": "moderate",
      "recommendations": ["Fastify + TypeBox for similar architecture", "tRPC for better type safety"],
      "architecturalConsiderations": ["Dependency injection patterns differ", "Async context handling varies"]
    }
  },
  "data_processing": {
    "pandas": {
      "pythonLibrary": "pandas",
      "category": "data_processing",
      "typeScriptEquivalents": [
        {
          "name": "Danfo.js",
          "package": "danfojs",
          "confidence": "medium",
          "notes": ["Pandas-inspired API", "Limited feature set", "Browser and Node.js"],
          "installCommand": "npm install danfojs",
          "apiDifferences": ["Smaller API surface", "Different performance characteristics", "Limited data types"],
          "migrationGuide": "Convert DataFrame operations to Danfo.js equivalents, handle missing features manually"
        },
        {
          "name": "Observable Plot + D3",
          "package": "@observablehq/plot d3",
          "confidence": "low",
          "notes": ["Visualization focus", "Not data manipulation", "Good for charts"],
          "installCommand": "npm install @observablehq/plot d3",
          "apiDifferences": ["No DataFrame concept", "Functional approach", "Visualization-oriented"],
          "migrationGuide": "Keep pandas backend, use for visualization layer only"
        }
      ],
      "migrationComplexity": "no-equivalent",
      "recommendations": ["Keep pandas backend with API layer", "Use Danfo.js for simple operations", "Consider WebAssembly solutions"],
      "architecturalConsiderations": ["Data serialization overhead", "Memory usage differences", "Performance implications"]
    },
    "numpy": {
      "pythonLibrary": "numpy",
      "category": "data_processing", 
      "typeScriptEquivalents": [
        {
          "name": "ML-Matrix",
          "package": "ml-matrix",
          "confidence": "medium",
          "notes": ["Basic matrix operations", "Limited compared to NumPy"],
          "installCommand": "npm install ml-matrix",
          "apiDifferences": ["Smaller API surface", "Different performance characteristics", "No broadcasting"],
          "migrationGuide": "Convert basic matrix operations, implement missing functionality manually"
        },
        {
          "name": "NumJs",
          "package": "numjs",
          "confidence": "low",
          "notes": ["NumPy-like API", "Experimental", "Limited functionality"],
          "installCommand": "npm install numjs",
          "apiDifferences": ["Incomplete implementation", "Performance gaps", "Limited data types"],
          "migrationGuide": "Use for basic operations only, keep NumPy backend for complex work"
        }
      ],
      "migrationComplexity": "complex",
      "recommendations": ["Consider keeping NumPy backend", "Evaluate WebAssembly options", "Use JS libraries for simple math"],
      "architecturalConsiderations": ["Array indexing differences", "Memory layout considerations", "Performance bottlenecks"]
    }
  },
  "http_clients": {
    "requests": {
      "pythonLibrary": "requests", 
      "category": "http_client",
      "typeScriptEquivalents": [
        {
          "name": "Axios",
          "package": "axios",
          "confidence": "high",
          "notes": ["Similar API design", "Promise-based", "Interceptors", "TypeScript support"],
          "installCommand": "npm install axios",
          "apiDifferences": ["Promise-based vs blocking", "Different error handling", "Built-in JSON parsing"],
          "migrationGuide": "Convert requests.get/post to axios equivalent, handle promises instead of blocking calls"
        },
        {
          "name": "Fetch API",
          "package": "node-fetch",
          "confidence": "high", 
          "notes": ["Native browser API", "Lighter weight", "Standard"],
          "installCommand": "npm install node-fetch @types/node-fetch",
          "apiDifferences": ["More verbose", "Manual JSON parsing", "Different error handling"],
          "migrationGuide": "Convert to fetch() calls, add manual JSON parsing and error handling"
        },
        {
          "name": "Got",
          "package": "got",
          "confidence": "high",
          "notes": ["Feature-rich", "TypeScript native", "Stream support"],
          "installCommand": "npm install got",
          "apiDifferences": ["Different API structure", "Built-in retry logic", "Stream-first approach"],
          "migrationGuide": "Leverage Got's TypeScript support and advanced features for complex HTTP needs"
        }
      ],
      "migrationComplexity": "simple",
      "recommendations": ["Axios for similarity to requests", "Fetch for standards compliance", "Got for advanced features"],
      "architecturalConsiderations": ["Promise handling required", "Error handling patterns differ", "Streaming differences"]
    }
  }
} 